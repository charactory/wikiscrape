#!/usr/bin/ruby -w

require 'rubygems'
require 'hpricot'
require 'open-uri'

class Wikiscraper

  def initialize(arguments)
    #ARGV needs to be cleared else it ends up in 'gets'
    substitutions = [[' ', '+'], ['(', '%28'], [')' '%29']]
    @keyword = arguments.join(" ").gsub(" ", "+")
    arguments.clear
    @keyword.gsub('(', "%28").gsub(')', '%29')
    
    @s_entries = []
    @search_links = []

    @search_uri = "http://en.wikipedia.org/wiki/Special:Search?search=#{@keyword}&fulltext=Search"

    @toc_string = '<table class="toc" id="toc" summary="Contents">'

  end

  def main
    process_search
    populate_arrays
    get_selection
    chop_toc
    final_page_processing
  end

  #open our search
  def process_search
    raw = Hpricot(open(@search_uri))

    #Chops off any content after Table of Contents
    if raw.to_s.index(@toc_string) == nil
      @s_page = raw
    else
      @s_page = Hpricot(raw.to_s.slice(1..raw.to_s.index(@toc_string)))
    end
  end

  def populate_arrays
    #search is an array of search result names
    @search = (@s_page/"ul.mw-search-results/li/:not(div.mw-search-result-data)").inner_text

    #search_links is an array of links of search results

    (@s_page/"ul.mw-search-results"/:a).each do |ah|
      links = ah.attributes['href'].sub!('/wiki/', 'http://en.wikipedia.org/wiki/')
      @search_links << links 
    end

    @search.each_line {|x| @s_entries << "#{x}\r"}

    @s_entries.each_index {|x| print "#{x+1}: #{@s_entries[x]}"}
  end

  def get_selection
    puts "\nType in a entry number:"
    @number = gets.chomp!.to_i-1
    @search_selection = Hpricot(open(@search_links[@number]))
  end

  def chop_toc
    if @search_selection.to_s.index(@toc_string) == nil
      @wiki_results = @search_selection
    else
      @wiki_results = Hpricot(@search_selection.to_s.slice(1..@search_selection.to_s.index(@toc_string)))
    end
  end

  def final_page_processing
    
  (@wiki_results/"table.infobox").remove
  @text_body = (@wiki_results/"#bodyContent")
  @text_body = (@text_body/"p/:not(#coordinates)")

  no_article_found = (@wiki_results/"div.noarticletext")

    if not no_article_found.empty?
      puts no_article_found.inner_text
    else
      if not @text_body.inner_text.index(/(.*)* can refer to:/)
        puts((@wiki_results/"div.dablink").inner_text) #disambig info
        puts "\n"
        @text_body.inner_text.gsub(/\[[\w\d]{0,3}\]/, "").each {|c| puts c}
      else
        #prints disambig information
        puts @text_body.inner_text
        puts "\n"
        links = (@wiki_results/"li")
        links.each {|link| puts link.inner_text} if not links.empty?
      end
    end
  end

end


scrape = Wikiscraper.new(ARGV)
scrape.main
