#!/usr/bin/ruby -w

require 'rubygems'
require 'hpricot'
require 'open-uri'

class Wikiscraper

  def initialize(arguments)
    #ARGV needs to be cleared else it ends up in 'gets'
    substitutions = [[' ', '+'], ['(', '%28'], [')' '%29']]
    @keyword = arguments.join(" ").gsub(" ", "+")
    arguments.clear
    @keyword.gsub('(', "%28").gsub(')', '%29')
    
    @s_entries = []
    @search_links = []

    @search_uri = "http://en.wikipedia.org/wiki/Special:Search?search=#{@keyword}&fulltext=Search"

    @toc_string = '<table class="toc" id="toc" summary="Contents">'

  end

  def main
    process_search
    populate_arrays
    get_selection
    final_page_processing
  end

  #open our search
  def process_search
    @s_page = Hpricot(open(@search_uri))
  end

  def populate_arrays
    #results_data contains all search result names
    results_data = (@s_page/"ul.mw-search-results/li/:not(div.mw-search-result-data)").inner_text

    #search_links is an array of links of search results
    (@s_page/"ul.mw-search-results"/:a).each do |ah|
      @search_links << ah.attributes['href'].sub!('/wiki/', 'http://en.wikipedia.org/wiki/') 
    end

    results_data.each_line {|x| @s_entries << "#{x}\r"}
    #print out the search results
    @s_entries.each_index {|x| print "#{x+1}: #{@s_entries[x]}"}
  end

  def get_selection
    puts "\nType in a entry number:"
    @number = gets.chomp!.to_i-1
    @search_selection = Hpricot(open(@search_links[@number]))

    #gets rid of everything after the table of contents
    if @search_selection.to_s.index(@toc_string) == nil
      @wiki_results = @search_selection
    else
      @wiki_results = Hpricot(@search_selection.to_s.slice(1..@search_selection.to_s.index(@toc_string)))
    end
  end

  def final_page_processing
    
    (@wiki_results/"table.infobox").remove
    @text_body = (@wiki_results/"#bodyContent/p/:not(#coordinates)")

    no_article_found = (@wiki_results/"div.noarticletext")

    if not no_article_found.empty?
      puts no_article_found.inner_text
    else
      puts((@wiki_results/"div.dablink").inner_text) #disambig info
      puts "\n"
      @text_body.inner_text.gsub(/\[[\w\d]{0,3}\]/, "").each {|c| puts c}
    end

  end

end


scrape = Wikiscraper.new(ARGV)
scrape.main
